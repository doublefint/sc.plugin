<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache">
<Class name="sc.plugin">
<Description>
[s]ource [c]ontrol plugin for InterSystems Cach√© (testing in v.2016.1) 
Just export or import to/from filesystem. Nothing more.
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Studio.SourceControl.Base</Super>
<TimeCreated>63294,56897.842943</TimeCreated>

<Method name="Test">
<ClassMethod>1</ClassMethod>
</Method>

<Parameter name="Flags">
<Description><![CDATA[
Just sync.
<li>1 : Present dialog on check in</li>
<li>2 : Present dialog on check out</li>
<li>3 : Ask to add new item to source control</li>
<li>4 : Ask to remove deleted item from source control</li></ul>]]></Description>
<Type>STRING</Type>
<Default>0000</Default>
</Parameter>

<Property name="Modified">
<Description>
Workaround for error in %Studio.AbstractDocument:SaveStream()+16 
in Cache for Windows (x86-64) 2016.1 (Build 596U) Mon Nov 9 2015 21:12:55 EST

If the root node is set to 1 then calls to the source control hooks will keep track if the
source control hook modifies the document and if it does then it will defined
%SourceControl.Modified(docname)=1.</Description>
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Method name="OnBeforeLoad">
<Description>
Import the file from the external format into Cache.
This is called before the actual load of data to give the chance
to load the item from an external format.</Description>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s ..Modified = 0 ;workaround for error in %Studio.AbstractDocument:SaveStream()+16 
    Q ..on( "beforeload", code )
]]></Implementation>
</Method>

<Method name="OnAfterSave">
<Description>
Called when Studio save something</Description>
<FormalSpec>code:%String,obj:%RegisteredObject=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    Q ..on( "aftersave" , code )
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<Description>
Called when Studio compile code 
and some parts of code may be changed
for example - storage scheme</Description>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    Q ..on( "aftercompile", code ) ;only for additional export
]]></Implementation>
</Method>

<Method name="OnAfterDelete">
<Description>
Called when Studio delete code</Description>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ 	Q ..on( "afterdelete", code )
]]></Implementation>
</Method>

<Method name="on">
<ClassMethod>1</ClassMethod>
<FormalSpec>event,code</FormalSpec>
<Implementation><![CDATA[	Q ##class(sc.classes).on( event, code )
]]></Implementation>
</Method>

<Method name="install">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns=$zu(5)</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	s classname = ..%ClassName(1) ;legacy equivalent of $classname()
	d ##class(sc.legacy).sourceControlClass( classname )
	
	d ##class(sc.options).handlers( "CLS", "sc.classes" )
	d ##class(sc.options).handlers( "MAC", "sc.routines" ) 
	d ##class(sc.options).handlers( "INT", "sc.routines" )
	d ##class(sc.options).handlers( "INC", "sc.routines" )
	d ##class(sc.options).handlers( "DFI", "sc.dfi" )
	d ##class(sc.options).printer( "sc.printer" )
	
	Q 1
]]></Implementation>
</Method>

<Method name="uninstall">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns=$zu(5)</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d ##class(sc.legacy).sourceControlClass( "" )
	Q 1
]]></Implementation>
</Method>
</Class>
</Export>
