<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="sc.dfi">
<Description>
Work with *.dfi documents
%DeepSee.UserLibrary.FolderItem</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>sc.classes</Super>
<TimeCreated>63899,52452.524809</TimeCreated>

<Property name="event">
<Description>
name of studio event</Description>
</Property>

<Property name="code">
<Description>
document name ( with extension )
for example: package.class.CLS</Description>
</Property>

<Property name="id">
<ReadOnly>1</ReadOnly>
</Property>

<Property name="fullName">
<ReadOnly>1</ReadOnly>
</Property>

<Method name="codeSet">
<FormalSpec>code</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s sc = ##super(code)
	s sc = sc && ..getData( code, .data )
	if ( sc ) {
		s i%id = $g(data("id"))
		s i%fullName = $g(data("fullName"))
	}
	Q 1
]]></Implementation>
</Method>

<Property name="name">
<ReadOnly>1</ReadOnly>
</Property>

<Method name="getData">
<Description>
collect information about dfi document</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[code,&data]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s sql = "Select ID, fullName From %DeepSee_UserLibrary.FolderItem Where documentName = ?"
	s rs = ##class(%SQL.Statement).%ExecDirect( , sql, code )
	s ( id, fullName ) = "" 
	if ( rs.%Next() ) {
		s data("id") = rs.ID
		s data("fullName") = rs.fullName
	}	
	Q 1
]]></Implementation>
</Method>

<Property name="ext">
<ReadOnly>1</ReadOnly>
</Property>

<Method name="filemask">
<Description>
file mask for import </Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Q "*.DFI.xml"
]]></Implementation>
</Method>

<Method name="ignore">
<Description>
return 1 for ignore code</Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Q 0
]]></Implementation>
</Method>

<Method name="export">
<Description><![CDATA[
After export fileTS > codeTS]]></Description>
<FormalSpec>filename=..filename()</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Q ..dfiExport( ..fullName, filename, 0 )
]]></Implementation>
</Method>

<Method name="dfiExport">
<ClassMethod>1</ClassMethod>
<FormalSpec>fullname,filename</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Q ##class(%DeepSee.UserLibrary.Utils).%Export( fullName, filename, 0 )
]]></Implementation>
</Method>

<Method name="import">
<FormalSpec>filename:%String,flags="ck-d"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s loaded = "", sc = ..load( filename, .loaded )
	s:sc ..code = loaded( 1 ) _ ".DFI"
	
	Q sc
]]></Implementation>
</Method>

<Method name="load">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[filename,&loaded=""]]></FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; .%Import( replace = 1, verbose = 0, killAll = 0, forceName = "", .loaded = "" )
	Q ##class(%DeepSee.UserLibrary.Utils).%Import( filename, 1, 0, 0, "", .loaded )
]]></Implementation>
</Method>

<Method name="codeTS">
<Description>
return local timestamp of DFI document</Description>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[ Q ..ts( ..id )
]]></Implementation>
</Method>

<Method name="ts">
<ClassMethod>1</ClassMethod>
<FormalSpec>dfiid</FormalSpec>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[
	s utcTS = ##class(%DeepSee.UserLibrary.FolderItem).timeModifiedGetStored( dfiid ) ;UTC timestamp
	s utc = $zdth(utcTS,3,,3) ;utc logical
	s local = $zdth(utc,-3) ; utc to local 
	s ts = $zdt(local,3,,0) ; local timestamp
	Q ts
]]></Implementation>
</Method>

<Method name="List">
<Description>
Return resultset with code documents</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&sc=1]]></FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	
 	s sql = "Select documentName as Name From %DeepSee_UserLibrary.FolderItem"
    s rs = ##class(%ResultSet).%New("%DynamicQuery:SQL")
    s sc = rs.Prepare( sql ) && rs.Execute( )
    Q rs
]]></Implementation>
</Method>
</Class>
</Export>
