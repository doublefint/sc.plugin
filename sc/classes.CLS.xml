<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="sc.classes">
<Description>
export/import *.cls documents into/from xml files ( *.CLS.xml )</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<TimeCreated>63890,65741.138899</TimeCreated>

<Property name="event">
<Description>
name of studio event</Description>
</Property>

<Property name="code">
<Description>
document name ( with extension )
for example: package.class.CLS</Description>
</Property>

<Method name="codeSet">
<FormalSpec>code</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	s i%code = code
	s i%name = ..nameExtract( code ) 
	s i%ext = ..extExtract( code )
	Q 1
]]></Implementation>
</Method>

<Property name="name">
<ReadOnly>1</ReadOnly>
</Property>

<Property name="ext">
<ReadOnly>1</ReadOnly>
</Property>

<Method name="fileTS">
<Description>
return file timestamp </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>file</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	Quit:'##class(%File).Exists(file) ""
    Quit $zdt( ##class(%File).GetFileDateModified( file ), 3 )
]]></Implementation>
</Method>

<Method name="codeTS">
<Description>
Return %TimeStamp of class  </Description>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[	Q ..ts( ..code ) ;remove ms
]]></Implementation>
</Method>

<Method name="ts">
<ClassMethod>1</ClassMethod>
<FormalSpec>class</FormalSpec>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[	Q $p( ##class(%RoutineMgr).TS( class ), "." ) ;remove ms
]]></Implementation>
</Method>

<Method name="nameExtract">
<ClassMethod>1</ClassMethod>
<FormalSpec>code</FormalSpec>
<Implementation><![CDATA[	Q $p( code, ".", 1, $l( code, "." ) - 1 )
]]></Implementation>
</Method>

<Method name="extExtract">
<ClassMethod>1</ClassMethod>
<FormalSpec>code</FormalSpec>
<Implementation><![CDATA[	Q $p( code, ".", $l( code, "." ) )
]]></Implementation>
</Method>

<Method name="on">
<Description>
Read settings and run event handlers</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>event,code</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s ext = ..extExtract( code )
	
	s list = ##class(sc.options).handlers( ext ) ;handlers list for event
	
	s printer = ##class(sc.printer).new() ;read settings or return default
	
	if ( list = "" ) {
		
		s msg = event _ "( " _ code _" ). Warning: handlers for '" _ ext _ "' not set!"
		d printer.warn( msg )
		Q 1
		
	} 
	
	s ll = $l(list,","), class = "", result = 1
	
	for i=1:1:ll  { 
		
		s class = $p( list, ",", i )
		s handler = $zobjclassmethod( class, "%New" ) ;$zobjclassmethod -> $classmethod
		s handler.code = code, handler.event = event
		
		if '$IsObject( handler ) {
			d printer.error( "Error! Can't create handler " _ handler )
			continue  
		}
		
		s sc = handler.handle()
		
		do ##class(%SYSTEM.Status).AppendStatus( result, sc )
		
	}	
	
	Q sc
]]></Implementation>
</Method>

<Method name="handle">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 	
 	s printer = ##class(sc.printer).new()
 
 	d printer.trace( ..event_"( "_..code _ " )" )
 	
 	Q:..ignore() 1 
	
	s filename = ..filename()
	
	if ..event = "afterdelete" {
		s sc = ..fileDelete( filename )
		d printer.w( "Delete " _ filename, sc )
		Q sc
	}
			
	#;ts - timeStamp
	s codeTS = ..codeTS()  
	d printer.trace( "codeTS: " _ codeTS )
	
	#; change events  - beforeload, aftersave, aftercompile
	s fileTS = ..fileTS( filename ) 
	d printer.trace( "fileTS: " _ fileTS _" ( " _ filename _ " ) " )
	
	
	if ( codeTS = fileTS ) Q 1 ;nothing to sync	
	
	if ( codeTS ] fileTS ) { ;export
		
		s sc = ..export( filename ) 
		d printer.w( ..code _" -> " _ filename, sc )
		Q sc
		
	}
	
	if (( fileTS ] codeTS ) && ( ..event '= "aftercompile" )) { ;import
		
		s sc = ..import( filename ) ; file newer - import from file
		d printer.w( filename _" -> " _ ..code, sc )
		Q sc
		
	}
	
	Q $$$OK
]]></Implementation>
</Method>

<Method name="workdir">
<Description>
Base directory for export</Description>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[ Q ##class(sc.options).workdir()
]]></Implementation>
</Method>

<Method name="fileDelete">
<Description>
handler can delete file</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>file</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Q ##class(%File).Delete( file )
]]></Implementation>
</Method>

<Method name="filename">
<Description>
convert code name to file name, packages translate as directories</Description>
<Implementation><![CDATA[
	
	s name = ..name
	s namelen = $l( name, "." )
	s hasPackage = ( namelen > 1 )  
	s ext = ..ext
		
	s dir = ..workdir(), path = ""
	s dm = "\" ; $$$IsWINDOWS d[eli]m[eter]
	#define dm( %dir ) $s( $e( %dir, $l( %dir ) ) = dm: "", 1: dm )
			
	if ( hasPackage ) { ;myPackage.myClass.CLS 
		
		s packages = $p( name, ".", 1, namelen - 1 ) ; for example: myPackage.myClass
		
		s path = $tr( packages, ".", dm ) ; for example: myPackage/myClass
		
		s:packages'="" dir = dir _ $$$dm(dir) _ path
		
		s name = $p( name, ".", namelen  )
		
	}
	
	s sc = ##class(%File).CreateDirectoryChain( dir ) ;need for (%File).NormalizeFilename
	s file = name _ "."_ ext _ ".xml"
	Q dir _ $$$dm(dir) _ file
]]></Implementation>
</Method>

<Method name="filemask">
<Description>
file mask for import </Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Q "*.CLS.xml"
]]></Implementation>
</Method>

<Method name="ignore">
<Description>
return true for ignore code</Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Q:$e(..code)="%" 1 ;ignore system classes
	Q:$e(..code, 1, $l("INFORMATION"))="INFORMATION" 1 ;SQL-standart classes
	Q:##class(sc.legacy).codeIsGenerated(..code) 1 ;ignore generated code
	Q 0
]]></Implementation>
</Method>

<Method name="export">
<Description><![CDATA[
After export fileTS > codeTS]]></Description>
<FormalSpec>filename=..filename()</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Q ##class(sc.legacy).classExport( ..code, filename )
]]></Implementation>
</Method>

<Method name="import">
<FormalSpec>filename,flags="ck-d"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s sc = $system.OBJ.Load( filename, flags, .err, .list )
	s:sc ..code = list
	Q sc
]]></Implementation>
</Method>

<Method name="exportAll">
<Description>
Initial export classes and routines</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s printer = ##class(sc.printer).new()
	
	s handler = ..%New(), handler.event = "exportAll"
    
    s rs = ..List(.sc) Q:'sc sc
    
    s result = 1
        
    while rs.Next() { 
      
      s handler.code = $g( rs.Data( "Name" ) )  ; <- this line differ from sc.classes:exportAll
      	
      if handler.ignore() continue     
	  
      s sc = handler.export()
      
      d printer.w( handler.code _ " -> " _ handler.filename(), sc )
      
      d ##class(%SYSTEM.Status).AppendStatus( result, sc )
      
    }
    
    d rs.Close()
	
	Q result
]]></Implementation>
</Method>

<Method name="List">
<Description>
Return resultset with all available documents</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&sc=1]]></FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	
	s rs = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
	s sc = rs.Execute() 
	Q rs
]]></Implementation>
</Method>

<Method name="importAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	s workdir = ##class(sc.options).workdir()
	
	s mask = ..filemask()
	
	s sc =  ..importDir( workdir, mask, .loaded )
	
	JOB ^sc.compile(loaded)
	
	Q sc
]]></Implementation>
</Method>

<Method name="importDir">
<Description>
Cach√© v.5.0 can't reimport class if exist opened object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[dir,mask,&loaded=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	k subdir s subdir = "", sc = 1
	
	s rs = ##class(%ResultSet).%New("%File:FileSet")
	s sc = rs.Execute( dir, mask, , 1 )
		
	while rs.Next() {
		
		s file = $g(rs.Data("Name"))
		s type = $g(rs.Data("Type"))
		s isDirectory = ( type = "D" )
		
		if ( isDirectory ){ 
			s subdir( $i( subdir ) ) = file
			continue 
		}
		
		s code = "", sc = $system.OBJ.Load( file, "k-d", , .code ) ;"k-d" - load only
		
		w !, file _ " -> " _ code, " ", +sc 
		
		if ( 'sc ) continue 
		
		s loaded = loaded _ "," _ code ;save name of loaded document
				
	} d rs.Close()
		
	#; for each subdir
	s i = "" for { s i = $o( subdir( i ), 1, dir ) Q:i=""
		s sc = ..importDir( dir, mask, .loaded ) Q:'sc
	}
		
	Q sc
]]></Implementation>
</Method>
</Class>
</Export>
